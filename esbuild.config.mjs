import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import postcss from "postcss";
import tailwindcss from "tailwindcss";
import autoprefixer from "autoprefixer";
import fs from "fs/promises";

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = process.argv[2] === "production";

// Process Tailwind CSS
const processTailwindCSS = async () => {
  const tailwindSource = await fs.readFile("src/styles/tailwind.css", "utf8");
  const result = await postcss([tailwindcss, autoprefixer]).process(tailwindSource, {
    from: "src/styles/tailwind.css",
    to: "styles.css",
  });

  await fs.writeFile("styles.css", result.css);
};

const context = await esbuild.context({
  banner: {
    js: banner,
  },
  entryPoints: ["main.ts"],
  bundle: true,
  external: [
    "obsidian",
    "electron",
    "@codemirror/autocomplete",
    "@codemirror/collab",
    "@codemirror/commands",
    "@codemirror/language",
    "@codemirror/lint",
    "@codemirror/search",
    "@codemirror/state",
    "@codemirror/view",
    "@lezer/common",
    "@lezer/highlight",
    "@lezer/lr",
    ...builtins,
  ],
  format: "cjs",
  target: "es2018",
  logLevel: "info",
  sourcemap: prod ? false : "inline",
  treeShaking: true,
  outfile: "main.js",
  minify: prod,
  plugins: [
    {
      name: "tailwind-css",
      setup(build) {
        build.onEnd(async () => {
          await processTailwindCSS();
        });
      },
    },
  ],
});

if (prod) {
  await context.rebuild();
  process.exit(0);
} else {
  await processTailwindCSS(); // Process initially
  await context.watch();
}
