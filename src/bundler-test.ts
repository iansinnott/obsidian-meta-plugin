/**
 * Example demonstrating how to use the esbuild bundler to create an Obsidian plugin
 */

import { MetaPlugin } from "./plugin";

/**
 * Example function that bundles a simple plugin using the MetaPlugin bundler
 */
export async function createSamplePlugin(plugin: MetaPlugin) {
  // Define the files in our virtual filesystem
  const files: Record<string, string> = {
    "./main.ts": `
import { Plugin, Notice } from 'obsidian';
import { getGreeting } from './utils';

export default class SamplePlugin extends Plugin {
  async onload() {
    console.log('Sample plugin loaded');
    
    // Add a ribbon icon
    this.addRibbonIcon('dice', 'Sample Plugin', () => {
      // Show a notification
      new Notice('Hello from Sample Plugin!');
    });
    
    // Import and use our utility
    const message = getGreeting('User');
    console.log(message);
  }
  
  onunload() {
    console.log('Sample plugin unloaded');
  }
}
`,
    "./utils.ts": `
/**
 * A simple utility function
 */
export function getGreeting(name: string): string {
  return \`Hello, \${name}! Welcome to your Obsidian plugin.\`;
}
`,
    "manifest.json": `
{
  "id": "sample-generated-plugin",
  "name": "Sample Generated Plugin",
  "version": "1.0.0",
  "minAppVersion": "0.15.0",
  "description": "A sample plugin generated by Meta Plugin",
  "author": "Meta Plugin",
  "authorUrl": "https://github.com/yourusername/obsidian-meta-plugin",
  "isDesktopOnly": false
}
`,
  };

  try {
    // Bundle the plugin
    const result = await plugin.bundlePlugin(files, "./main.ts", "sample-generated-plugin");

    if (result.success) {
      console.log("Plugin successfully bundled:", result.outputPath);
      return {
        success: true,
        outputPath: result.outputPath,
        files: result.files,
      };
    } else {
      console.error("Plugin bundling failed:", result.error);
      return { success: false, error: result.error };
    }
  } catch (error) {
    console.error("Error during plugin bundling:", error);
    return { success: false, error };
  }
}

/**
 * Example function that demonstrates how to add more complex TypeScript features
 * like interfaces, types, and advanced syntax
 */
export async function createAdvancedPlugin(plugin: MetaPlugin) {
  // Define files with more advanced TypeScript features
  const files: Record<string, string> = {
    "main.ts": `
import { Plugin, Notice, Menu, Editor, MarkdownView } from 'obsidian';
import { SettingsTab, PluginSettings, DEFAULT_SETTINGS } from './settings';
import { processText, TextProcessor } from './text-processor';

export default class AdvancedPlugin extends Plugin {
  settings: PluginSettings;
  processor: TextProcessor;

  async onload() {
    await this.loadSettings();
    this.processor = new TextProcessor(this.settings);

    // Add settings tab
    this.addSettingTab(new SettingsTab(this.app, this));

    // Register commands
    this.addCommand({
      id: 'process-selection',
      name: 'Process selected text',
      editorCallback: (editor: Editor, view: MarkdownView) => {
        const selection = editor.getSelection();
        if (selection) {
          const processed = this.processor.process(selection);
          editor.replaceSelection(processed);
          new Notice('Text processed successfully');
        }
      }
    });

    // Add context menu
    this.registerEvent(
      this.app.workspace.on('editor-menu', (menu: Menu, editor: Editor) => {
        menu.addItem((item) => {
          item
            .setTitle('Process with Advanced Plugin')
            .setIcon('text-cursor')
            .onClick(() => {
              const selection = editor.getSelection();
              if (selection) {
                const processed = this.processor.process(selection);
                editor.replaceSelection(processed);
                new Notice('Text processed successfully');
              }
            });
        });
      })
    );

    console.log('Advanced plugin loaded');
  }

  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }

  async saveSettings() {
    await this.saveData(this.settings);
    this.processor.updateSettings(this.settings);
  }

  onunload() {
    console.log('Advanced plugin unloaded');
  }
}
`,
    "settings.ts": `
import { App, PluginSettingTab, Setting } from 'obsidian';
import type AdvancedPlugin from './main';

export interface PluginSettings {
  transformationType: 'uppercase' | 'lowercase' | 'capitalize';
  addPrefix: boolean;
  prefix: string;
  addSuffix: boolean;
  suffix: string;
}

export const DEFAULT_SETTINGS: PluginSettings = {
  transformationType: 'capitalize',
  addPrefix: false,
  prefix: '>> ',
  addSuffix: false,
  suffix: ' <<'
};

export class SettingsTab extends PluginSettingTab {
  plugin: AdvancedPlugin;

  constructor(app: App, plugin: AdvancedPlugin) {
    super(app, plugin);
    this.plugin = plugin;
  }

  display(): void {
    const { containerEl } = this;
    containerEl.empty();

    containerEl.createEl('h2', { text: 'Advanced Plugin Settings' });

    new Setting(containerEl)
      .setName('Text transformation')
      .setDesc('Choose how to transform the text')
      .addDropdown(dropdown => {
        dropdown
          .addOption('uppercase', 'UPPERCASE')
          .addOption('lowercase', 'lowercase')
          .addOption('capitalize', 'Capitalize')
          .setValue(this.plugin.settings.transformationType)
          .onChange(async (value: 'uppercase' | 'lowercase' | 'capitalize') => {
            this.plugin.settings.transformationType = value;
            await this.plugin.saveSettings();
          });
      });

    new Setting(containerEl)
      .setName('Add prefix')
      .setDesc('Add a prefix to the processed text')
      .addToggle(toggle => {
        toggle
          .setValue(this.plugin.settings.addPrefix)
          .onChange(async (value) => {
            this.plugin.settings.addPrefix = value;
            await this.plugin.saveSettings();
          });
      });

    new Setting(containerEl)
      .setName('Prefix text')
      .setDesc('Text to add before the processed text')
      .addText(text => {
        text
          .setPlaceholder('Enter prefix...')
          .setValue(this.plugin.settings.prefix)
          .onChange(async (value) => {
            this.plugin.settings.prefix = value;
            await this.plugin.saveSettings();
          });
      });

    new Setting(containerEl)
      .setName('Add suffix')
      .setDesc('Add a suffix to the processed text')
      .addToggle(toggle => {
        toggle
          .setValue(this.plugin.settings.addSuffix)
          .onChange(async (value) => {
            this.plugin.settings.addSuffix = value;
            await this.plugin.saveSettings();
          });
      });

    new Setting(containerEl)
      .setName('Suffix text')
      .setDesc('Text to add after the processed text')
      .addText(text => {
        text
          .setPlaceholder('Enter suffix...')
          .setValue(this.plugin.settings.suffix)
          .onChange(async (value) => {
            this.plugin.settings.suffix = value;
            await this.plugin.saveSettings();
          });
      });
  }
}
`,
    "text-processor.ts": `
import type { PluginSettings } from './settings';

export class TextProcessor {
  settings: PluginSettings;

  constructor(settings: PluginSettings) {
    this.settings = settings;
  }

  updateSettings(newSettings: PluginSettings): void {
    this.settings = newSettings;
  }

  process(text: string): string {
    let result = this.transform(text);
    
    if (this.settings.addPrefix) {
      result = this.settings.prefix + result;
    }
    
    if (this.settings.addSuffix) {
      result = result + this.settings.suffix;
    }
    
    return result;
  }

  private transform(text: string): string {
    switch (this.settings.transformationType) {
      case 'uppercase':
        return text.toUpperCase();
      case 'lowercase':
        return text.toLowerCase();
      case 'capitalize':
        return text.split(' ')
          .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())
          .join(' ');
      default:
        return text;
    }
  }
}
`,
    "manifest.json": `
{
  "id": "advanced-generated-plugin",
  "name": "Advanced Generated Plugin",
  "version": "1.0.0",
  "minAppVersion": "0.15.0",
  "description": "An advanced plugin generated by Meta Plugin with TypeScript features",
  "author": "Meta Plugin",
  "authorUrl": "https://github.com/yourusername/obsidian-meta-plugin",
  "isDesktopOnly": false
}
`,
  };

  try {
    // Bundle the plugin
    const result = await plugin.bundlePlugin(files, "main.ts", "advanced-generated-plugin");

    if (result.success) {
      console.log("Advanced plugin successfully bundled:", result.outputPath);
      return {
        success: true,
        outputPath: result.outputPath,
        files: result.files,
      };
    } else {
      console.error("Advanced plugin bundling failed:", result.error);
      return { success: false, error: result.error };
    }
  } catch (error) {
    console.error("Error during advanced plugin bundling:", error);
    return { success: false, error };
  }
}
